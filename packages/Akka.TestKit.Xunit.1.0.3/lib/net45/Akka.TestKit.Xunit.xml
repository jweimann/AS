<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Akka.TestKit.Xunit</name>
    </assembly>
    <members>
        <member name="T:Akka.TestKit.Xunit.Internals.AkkaAssertEqualityComparer`1">
            <summary>
            Default implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used by the Akka's xUnit.net equality assertions.
            Copy of xUnits code
            https://github.com/xunit/xunit/blob/3e6ab94ca231a6d8c86e90d6e724631a0faa33b7/src/xunit.assert/Asserts/Sdk/AssertEqualityComparer.cs
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
            <typeparam name="T">The type that is being compared.</typeparam>
        </member>
        <member name="M:Akka.TestKit.Xunit.Internals.AkkaAssertEqualityComparer`1.#ctor(System.Boolean,System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.TestKit.Xunit.Internals.AkkaAssertEqualityComparer`1"/> class.
            </summary>
            <param name="skipTypeCheck">Set to <c>true</c> to skip type equality checks.</param>
            <param name="innerComparer">The inner comparer to be used when the compared objects are enumerable.</param>
        </member>
        <member name="M:Akka.TestKit.Xunit.Internals.AkkaAssertEqualityComparer`1.Equals(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.TestKit.Xunit.Internals.AkkaAssertEqualityComparer`1.GetHashCode(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Akka.TestKit.Xunit.Internals.AkkaAssertEqualityComparerAdapter`1">
            <summary>
            A class that wraps <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to create <see cref="T:System.Collections.IEqualityComparer"/>.
            Copy of xUnits class:
            https://github.com/xunit/xunit/blob/3e6ab94ca231a6d8c86e90d6e724631a0faa33b7/src/xunit.assert/Asserts/Sdk/AssertEqualityComparerAdapter.cs
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
            <typeparam name="T">The type that is being compared.</typeparam>
        </member>
        <member name="M:Akka.TestKit.Xunit.Internals.AkkaAssertEqualityComparerAdapter`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.TestKit.Xunit.Internals.AkkaAssertEqualityComparerAdapter`1"/> class.
            </summary>
            <param name="innerComparer">The comparer that is being adapted.</param>
        </member>
        <member name="M:Akka.TestKit.Xunit.Internals.AkkaAssertEqualityComparerAdapter`1.Equals(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.TestKit.Xunit.Internals.AkkaAssertEqualityComparerAdapter`1.GetHashCode(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Akka.TestKit.Xunit.TestKit">
            <summary>
            TestKit for xUnit.
            </summary>
        </member>
        <member name="M:Akka.TestKit.Xunit.TestKit.#ctor(Akka.Actor.ActorSystem)">
            <summary>
            Create a new instance of the <see cref="T:Akka.TestKit.Xunit.TestKit"/> for xUnit class.
            If no <paramref name="system"/> is passed in, a new system 
            with <see cref="P:Akka.TestKit.Xunit.TestKit.DefaultConfig"/> will be created.
            </summary>
            <param name="system">Optional: The actor system.</param>
        </member>
        <member name="M:Akka.TestKit.Xunit.TestKit.#ctor(Akka.Configuration.Config,System.String)">
            <summary>
            Create a new instance of the <see cref="T:Akka.TestKit.Xunit.TestKit"/> for xUnit class.
            A new system with the specified configuration will be created.
            </summary>
            <param name="config">The configuration to use for the system.</param>
            <param name="actorSystemName">Optional: the name of the system. Default: "test"</param>
        </member>
        <member name="M:Akka.TestKit.Xunit.TestKit.#ctor(System.String)">
            <summary>
            Create a new instance of the <see cref="T:Akka.TestKit.Xunit.TestKit"/> for xUnit class.
            A new system with the specified configuration will be created.
            </summary>
            <param name="config">The configuration to use for the system.</param>
        </member>
        <member name="M:Akka.TestKit.Xunit.TestKit.AfterAll">
            <summary>
            This method is called when a test ends. 
            <remarks>If you override this, make sure you either call 
            base.AfterTest() or <see cref="M:Akka.TestKit.TestKitBase.Shutdown(System.Nullable{System.TimeSpan},System.Boolean)">TestKitBase.Shutdown</see> to shut down
            the system. Otherwise you'll leak memory.
            </remarks>
            </summary>
        </member>
        <member name="M:Akka.TestKit.Xunit.TestKit.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Akka.TestKit.Xunit.TestKit.Dispose(System.Boolean)">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
            <param name="disposing">if set to <c>true</c> the method has been called directly or indirectly by a 
            user's code. Managed and unmanaged resources will be disposed.<br />
            if set to <c>false</c> the method has been called by the runtime from inside the finalizer and only 
            unmanaged resources can be disposed.</param>
        </member>
        <member name="T:Akka.TestKit.Xunit.XunitAssertions">
            <summary>
            Assertions for xUnit
            </summary>
        </member>
    </members>
</doc>
